// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: hive_for_agent/hive_for_agent.proto

package hive_for_agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HiveForAgentClient is the client API for HiveForAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiveForAgentClient interface {
	AuthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EventsChannel(ctx context.Context, opts ...grpc.CallOption) (HiveForAgent_EventsChannelClient, error)
	GetAvailableProxies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableProxies, error)
	CertbotAdd(ctx context.Context, in *CertbotDomainName, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CertbotDel(ctx context.Context, in *CertbotDomainName, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hiveForAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewHiveForAgentClient(cc grpc.ClientConnInterface) HiveForAgentClient {
	return &hiveForAgentClient{cc}
}

func (c *hiveForAgentClient) AuthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hive_for_agent.HiveForAgent/AuthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveForAgentClient) EventsChannel(ctx context.Context, opts ...grpc.CallOption) (HiveForAgent_EventsChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &HiveForAgent_ServiceDesc.Streams[0], "/hive_for_agent.HiveForAgent/EventsChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &hiveForAgentEventsChannelClient{stream}
	return x, nil
}

type HiveForAgent_EventsChannelClient interface {
	Send(*AgentEvent) error
	Recv() (*HiveEvent, error)
	grpc.ClientStream
}

type hiveForAgentEventsChannelClient struct {
	grpc.ClientStream
}

func (x *hiveForAgentEventsChannelClient) Send(m *AgentEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hiveForAgentEventsChannelClient) Recv() (*HiveEvent, error) {
	m := new(HiveEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hiveForAgentClient) GetAvailableProxies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableProxies, error) {
	out := new(AvailableProxies)
	err := c.cc.Invoke(ctx, "/hive_for_agent.HiveForAgent/GetAvailableProxies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveForAgentClient) CertbotAdd(ctx context.Context, in *CertbotDomainName, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hive_for_agent.HiveForAgent/CertbotAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveForAgentClient) CertbotDel(ctx context.Context, in *CertbotDomainName, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hive_for_agent.HiveForAgent/CertbotDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiveForAgentServer is the server API for HiveForAgent service.
// All implementations must embed UnimplementedHiveForAgentServer
// for forward compatibility
type HiveForAgentServer interface {
	AuthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	EventsChannel(HiveForAgent_EventsChannelServer) error
	GetAvailableProxies(context.Context, *emptypb.Empty) (*AvailableProxies, error)
	CertbotAdd(context.Context, *CertbotDomainName) (*emptypb.Empty, error)
	CertbotDel(context.Context, *CertbotDomainName) (*emptypb.Empty, error)
	mustEmbedUnimplementedHiveForAgentServer()
}

// UnimplementedHiveForAgentServer must be embedded to have forward compatible implementations.
type UnimplementedHiveForAgentServer struct {
}

func (UnimplementedHiveForAgentServer) AuthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheck not implemented")
}
func (UnimplementedHiveForAgentServer) EventsChannel(HiveForAgent_EventsChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsChannel not implemented")
}
func (UnimplementedHiveForAgentServer) GetAvailableProxies(context.Context, *emptypb.Empty) (*AvailableProxies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableProxies not implemented")
}
func (UnimplementedHiveForAgentServer) CertbotAdd(context.Context, *CertbotDomainName) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertbotAdd not implemented")
}
func (UnimplementedHiveForAgentServer) CertbotDel(context.Context, *CertbotDomainName) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertbotDel not implemented")
}
func (UnimplementedHiveForAgentServer) mustEmbedUnimplementedHiveForAgentServer() {}

// UnsafeHiveForAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiveForAgentServer will
// result in compilation errors.
type UnsafeHiveForAgentServer interface {
	mustEmbedUnimplementedHiveForAgentServer()
}

func RegisterHiveForAgentServer(s grpc.ServiceRegistrar, srv HiveForAgentServer) {
	s.RegisterService(&HiveForAgent_ServiceDesc, srv)
}

func _HiveForAgent_AuthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveForAgentServer).AuthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive_for_agent.HiveForAgent/AuthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveForAgentServer).AuthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiveForAgent_EventsChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HiveForAgentServer).EventsChannel(&hiveForAgentEventsChannelServer{stream})
}

type HiveForAgent_EventsChannelServer interface {
	Send(*HiveEvent) error
	Recv() (*AgentEvent, error)
	grpc.ServerStream
}

type hiveForAgentEventsChannelServer struct {
	grpc.ServerStream
}

func (x *hiveForAgentEventsChannelServer) Send(m *HiveEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hiveForAgentEventsChannelServer) Recv() (*AgentEvent, error) {
	m := new(AgentEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HiveForAgent_GetAvailableProxies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveForAgentServer).GetAvailableProxies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive_for_agent.HiveForAgent/GetAvailableProxies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveForAgentServer).GetAvailableProxies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiveForAgent_CertbotAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertbotDomainName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveForAgentServer).CertbotAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive_for_agent.HiveForAgent/CertbotAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveForAgentServer).CertbotAdd(ctx, req.(*CertbotDomainName))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiveForAgent_CertbotDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertbotDomainName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveForAgentServer).CertbotDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive_for_agent.HiveForAgent/CertbotDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveForAgentServer).CertbotDel(ctx, req.(*CertbotDomainName))
	}
	return interceptor(ctx, in, info, handler)
}

// HiveForAgent_ServiceDesc is the grpc.ServiceDesc for HiveForAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HiveForAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hive_for_agent.HiveForAgent",
	HandlerType: (*HiveForAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthCheck",
			Handler:    _HiveForAgent_AuthCheck_Handler,
		},
		{
			MethodName: "GetAvailableProxies",
			Handler:    _HiveForAgent_GetAvailableProxies_Handler,
		},
		{
			MethodName: "CertbotAdd",
			Handler:    _HiveForAgent_CertbotAdd_Handler,
		},
		{
			MethodName: "CertbotDel",
			Handler:    _HiveForAgent_CertbotDel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventsChannel",
			Handler:       _HiveForAgent_EventsChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hive_for_agent/hive_for_agent.proto",
}
