// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: hive_for_agent/hive_for_agent.proto

package hive_for_agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HiveForAgentClient is the client API for HiveForAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiveForAgentClient interface {
	RegisterAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAvailableProxies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableProxies, error)
}

type hiveForAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewHiveForAgentClient(cc grpc.ClientConnInterface) HiveForAgentClient {
	return &hiveForAgentClient{cc}
}

func (c *hiveForAgentClient) RegisterAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hive_for_agent.HiveForAgent/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveForAgentClient) GetAvailableProxies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableProxies, error) {
	out := new(AvailableProxies)
	err := c.cc.Invoke(ctx, "/hive_for_agent.HiveForAgent/GetAvailableProxies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiveForAgentServer is the server API for HiveForAgent service.
// All implementations must embed UnimplementedHiveForAgentServer
// for forward compatibility
type HiveForAgentServer interface {
	RegisterAgent(context.Context, *AgentInfo) (*emptypb.Empty, error)
	GetAvailableProxies(context.Context, *emptypb.Empty) (*AvailableProxies, error)
	mustEmbedUnimplementedHiveForAgentServer()
}

// UnimplementedHiveForAgentServer must be embedded to have forward compatible implementations.
type UnimplementedHiveForAgentServer struct {
}

func (UnimplementedHiveForAgentServer) RegisterAgent(context.Context, *AgentInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedHiveForAgentServer) GetAvailableProxies(context.Context, *emptypb.Empty) (*AvailableProxies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableProxies not implemented")
}
func (UnimplementedHiveForAgentServer) mustEmbedUnimplementedHiveForAgentServer() {}

// UnsafeHiveForAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiveForAgentServer will
// result in compilation errors.
type UnsafeHiveForAgentServer interface {
	mustEmbedUnimplementedHiveForAgentServer()
}

func RegisterHiveForAgentServer(s grpc.ServiceRegistrar, srv HiveForAgentServer) {
	s.RegisterService(&HiveForAgent_ServiceDesc, srv)
}

func _HiveForAgent_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveForAgentServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive_for_agent.HiveForAgent/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveForAgentServer).RegisterAgent(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiveForAgent_GetAvailableProxies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveForAgentServer).GetAvailableProxies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive_for_agent.HiveForAgent/GetAvailableProxies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveForAgentServer).GetAvailableProxies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HiveForAgent_ServiceDesc is the grpc.ServiceDesc for HiveForAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HiveForAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hive_for_agent.HiveForAgent",
	HandlerType: (*HiveForAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _HiveForAgent_RegisterAgent_Handler,
		},
		{
			MethodName: "GetAvailableProxies",
			Handler:    _HiveForAgent_GetAvailableProxies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hive_for_agent/hive_for_agent.proto",
}
