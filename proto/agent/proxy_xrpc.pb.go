// Code generated by protoc-gen-go-xrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-xrpc v1.1.0
// - protoc             v5.29.2
// source: agent/proxy.proto

package agent

import (
	context "context"
	xrpc "github.com/xornet-sl/go-xrpc/xrpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires go-xrpc v1.0.0 or later.
const _ = xrpc.SupportPackageIsVersion1

// AgentForProxyClient is the client API for AgentForProxy service.
type AgentForProxyClient interface {
	ConnectionChannel(ctx context.Context, opts ...xrpc.CallOption) (AgentForProxy_ConnectionChannelClient, error)
}

type agentForProxyClient struct {
	cc xrpc.InvokableConnection
}

func NewAgentForProxyClient(cc xrpc.InvokableConnection) AgentForProxyClient {
	return &agentForProxyClient{cc}
}

func (c *agentForProxyClient) ConnectionChannel(ctx context.Context, opts ...xrpc.CallOption) (AgentForProxy_ConnectionChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, "agent.AgentForProxy", "ConnectionChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentForProxyConnectionChannelClient{stream}
	return x, nil
}

type AgentForProxy_ConnectionChannelClient interface {
	Send(*ConnectionMessage) error
	Recv() (*ConnectionMessage, error)
	xrpc.RpcStream
}

type agentForProxyConnectionChannelClient struct {
	xrpc.RpcStream
}

func (x *agentForProxyConnectionChannelClient) Send(m *ConnectionMessage) error {
	return x.RpcStream.SendMsg(m)
}

func (x *agentForProxyConnectionChannelClient) Recv() (*ConnectionMessage, error) {
	m := new(ConnectionMessage)
	if err := x.RpcStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentForProxyServer is the server API for AgentForProxy service.
// All implementations must embed UnimplementedAgentForProxyServer
// for forward compatibility
type AgentForProxyServer interface {
	ConnectionChannel(AgentForProxy_ConnectionChannelServer) error
	mustEmbedUnimplementedAgentForProxyServer()
}

// UnimplementedAgentForProxyServer must be embedded to have forward compatible implementations.
type UnimplementedAgentForProxyServer struct {
}

func (UnimplementedAgentForProxyServer) ConnectionChannel(AgentForProxy_ConnectionChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectionChannel not implemented")
}
func (UnimplementedAgentForProxyServer) mustEmbedUnimplementedAgentForProxyServer() {}

func RegisterAgentForProxyServer(s xrpc.ServiceRegistrar, srv AgentForProxyServer) {
	s.RegisterService(&AgentForProxy_ServiceDesc, srv)
}

func _AgentForProxy_ConnectionChannel_Handler(srv interface{}, stream xrpc.RpcStream) error {
	return srv.(AgentForProxyServer).ConnectionChannel(&agentForProxyConnectionChannelServer{stream})
}

type AgentForProxy_ConnectionChannelServer interface {
	Send(*ConnectionMessage) error
	Recv() (*ConnectionMessage, error)
	xrpc.RpcStream
}

type agentForProxyConnectionChannelServer struct {
	xrpc.RpcStream
}

func (x *agentForProxyConnectionChannelServer) Send(m *ConnectionMessage) error {
	return x.RpcStream.SendMsg(m)
}

func (x *agentForProxyConnectionChannelServer) Recv() (*ConnectionMessage, error) {
	m := new(ConnectionMessage)
	if err := x.RpcStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentForProxy_ServiceDesc is the xrpc.ServiceDesc for AgentForProxy service.
// It's only intended for direct use with xrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentForProxy_ServiceDesc = xrpc.ServiceDesc{
	ServiceName: "agent.AgentForProxy",
	HandlerType: (*AgentForProxyServer)(nil),
	Methods:     map[string]xrpc.MethodHandler{},
	Streams: map[string]xrpc.StreamDesc{
		"ConnectionChannel": {
			Handler:       _AgentForProxy_ConnectionChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
