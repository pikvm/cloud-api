// Code generated by protoc-gen-go-xrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-xrpc v1.1.0
// - protoc             v6.30.0
// source: common/common.proto

package common

import (
	context "context"
	xrpc "github.com/xornet-sl/go-xrpc/xrpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires go-xrpc v1.0.0 or later.
const _ = xrpc.SupportPackageIsVersion1

// PingClient is the client API for Ping service.
type PingClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...xrpc.CallOption) (*emptypb.Empty, error)
}

type pingClient struct {
	cc xrpc.InvokableConnection
}

func NewPingClient(cc xrpc.InvokableConnection) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...xrpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "common.Ping", "Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingServer is the server API for Ping service.
// All implementations must embed UnimplementedPingServer
// for forward compatibility
type PingServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedPingServer()
}

// UnimplementedPingServer must be embedded to have forward compatible implementations.
type UnimplementedPingServer struct {
}

func (UnimplementedPingServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPingServer) mustEmbedUnimplementedPingServer() {}

func RegisterPingServer(s xrpc.ServiceRegistrar, srv PingServer) {
	s.RegisterService(&Ping_ServiceDesc, srv)
}

func _Ping_Ping_Handler(srv interface{}, ctx context.Context, in proto.Message) (proto.Message, error) {
	return srv.(PingServer).Ping(ctx, in.(*emptypb.Empty))
}

// Ping_ServiceDesc is the xrpc.ServiceDesc for Ping service.
// It's only intended for direct use with xrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ping_ServiceDesc = xrpc.ServiceDesc{
	ServiceName: "common.Ping",
	HandlerType: (*PingServer)(nil),
	Methods: map[string]xrpc.MethodHandler{
		"Ping": _Ping_Ping_Handler,
	},
	Streams: map[string]xrpc.StreamDesc{},
}
