// Code generated by protoc-gen-go-xrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-xrpc v1.1.0
// - protoc             v5.29.2
// source: hiveagent/hive.proto

package hiveagent

import (
	context "context"
	xrpc "github.com/xornet-sl/go-xrpc/xrpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires go-xrpc v1.0.0 or later.
const _ = xrpc.SupportPackageIsVersion1

// HiveForAgentClient is the client API for HiveForAgent service.
type HiveForAgentClient interface {
	// rpc RegisterAgent(AgentInfo) returns (google.protobuf.Empty);
	WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...xrpc.CallOption) (*AgentInfo, error)
	GetAvailableProxies(ctx context.Context, in *emptypb.Empty, opts ...xrpc.CallOption) (*AvailableProxies, error)
}

type hiveForAgentClient struct {
	cc xrpc.InvokableConnection
}

func NewHiveForAgentClient(cc xrpc.InvokableConnection) HiveForAgentClient {
	return &hiveForAgentClient{cc}
}

func (c *hiveForAgentClient) WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...xrpc.CallOption) (*AgentInfo, error) {
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, "hiveagent.HiveForAgent", "WhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveForAgentClient) GetAvailableProxies(ctx context.Context, in *emptypb.Empty, opts ...xrpc.CallOption) (*AvailableProxies, error) {
	out := new(AvailableProxies)
	err := c.cc.Invoke(ctx, "hiveagent.HiveForAgent", "GetAvailableProxies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiveForAgentServer is the server API for HiveForAgent service.
// All implementations must embed UnimplementedHiveForAgentServer
// for forward compatibility
type HiveForAgentServer interface {
	// rpc RegisterAgent(AgentInfo) returns (google.protobuf.Empty);
	WhoAmI(context.Context, *emptypb.Empty) (*AgentInfo, error)
	GetAvailableProxies(context.Context, *emptypb.Empty) (*AvailableProxies, error)
	mustEmbedUnimplementedHiveForAgentServer()
}

// UnimplementedHiveForAgentServer must be embedded to have forward compatible implementations.
type UnimplementedHiveForAgentServer struct {
}

func (UnimplementedHiveForAgentServer) WhoAmI(context.Context, *emptypb.Empty) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedHiveForAgentServer) GetAvailableProxies(context.Context, *emptypb.Empty) (*AvailableProxies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableProxies not implemented")
}
func (UnimplementedHiveForAgentServer) mustEmbedUnimplementedHiveForAgentServer() {}

func RegisterHiveForAgentServer(s xrpc.ServiceRegistrar, srv HiveForAgentServer) {
	s.RegisterService(&HiveForAgent_ServiceDesc, srv)
}

func _HiveForAgent_WhoAmI_Handler(srv interface{}, ctx context.Context, in proto.Message) (proto.Message, error) {
	return srv.(HiveForAgentServer).WhoAmI(ctx, in.(*emptypb.Empty))
}

func _HiveForAgent_GetAvailableProxies_Handler(srv interface{}, ctx context.Context, in proto.Message) (proto.Message, error) {
	return srv.(HiveForAgentServer).GetAvailableProxies(ctx, in.(*emptypb.Empty))
}

// HiveForAgent_ServiceDesc is the xrpc.ServiceDesc for HiveForAgent service.
// It's only intended for direct use with xrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HiveForAgent_ServiceDesc = xrpc.ServiceDesc{
	ServiceName: "hiveagent.HiveForAgent",
	HandlerType: (*HiveForAgentServer)(nil),
	Methods: map[string]xrpc.MethodHandler{
		"WhoAmI":              _HiveForAgent_WhoAmI_Handler,
		"GetAvailableProxies": _HiveForAgent_GetAvailableProxies_Handler,
	},
	Streams: map[string]xrpc.StreamDesc{},
}
